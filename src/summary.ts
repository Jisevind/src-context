/**
 * Summary report generator for src-context build statistics
 */

import { BuildStats } from './types.js';

/**
 * Generates a formatted summary report for build statistics
 * @param stats - The build statistics object
 * @returns A formatted string ready for console output
 */
export function generateSummaryReport(stats: BuildStats): string {
  // Helper function to format file paths for better readability
  const formatPath = (path: string): string => {
    if (!path) return 'N/A';
    // Truncate very long paths
    if (path.length > 50) {
      return '...' + path.slice(-47);
    }
    return path;
  };

  // Helper function to add thousands separator
  const formatNumber = (num: number): string => {
    return num.toLocaleString();
  };

  // Calculate percentages for better context
  const inclusionRate = stats.totalFilesFound > 0 
    ? ((stats.filesToInclude / stats.totalFilesFound) * 100).toFixed(1)
    : '0.0';

  const minificationRate = stats.filesToInclude > 0
    ? ((stats.filesToMinify / stats.filesToInclude) * 100).toFixed(1)
    : '0.0';

  // Build the report
  const report = [
    '┌──────────────────────────────┐',
    '│     src-context REPORT       │',
    '└──────────────────────────────┘',
    '',
    '📊 AGGREGATION SUMMARY',
    '───────────────────────────────',
    `Found:           ${formatNumber(stats.totalFilesFound)} files`,
    `Included:        ${formatNumber(stats.filesToInclude)} files (${inclusionRate}%)`,
    `Minified:        ${formatNumber(stats.filesToMinify)} files (${minificationRate}%)`,
    `Ignored:         ${formatNumber(stats.filesIgnored)} files`,
    '',
    '📦 FINAL CONTEXT',
    '───────────────────────────────',
    `Total Tokens:    ${formatNumber(stats.totalTokenCount)}`,
    `Output Size:     ${stats.totalFileSizeKB.toFixed(2)} KB`,
    `Binaries/SVGs:   ${formatNumber(stats.binaryAndSvgFiles)}`,
    `Skipped Large:   ${formatNumber(stats.skippedLargeFiles)}`,
    '',
    '🔍 TOP 3 TOKEN CONSUMERS',
    '───────────────────────────────',
    `1. ${formatPath(stats.topTokenConsumers[0]?.path || 'N/A')} (${formatNumber(stats.topTokenConsumers[0]?.tokenCount || 0)} tokens)`,
    `2. ${formatPath(stats.topTokenConsumers[1]?.path || 'N/A')} (${formatNumber(stats.topTokenConsumers[1]?.tokenCount || 0)} tokens)`,
    `3. ${formatPath(stats.topTokenConsumers[2]?.path || 'N/A')} (${formatNumber(stats.topTokenConsumers[2]?.tokenCount || 0)} tokens)`,
  ];

  // Add detailed breakdown if there are ignored files
  if (stats.filesIgnored > 0) {
    report.push('');
    report.push('🚫 IGNORED FILES BREAKDOWN');
    report.push('───────────────────────────────');
    report.push(`Default ignore:  ${formatNumber(stats.filesIgnoredByDefault)}`);
    report.push(`Custom ignore:   ${formatNumber(stats.filesIgnoredByCustom)}`);
    report.push(`CLI ignore:      ${formatNumber(stats.filesIgnoredByCli)}`);
  }

  // Add tips based on the results
  const tips = [];
  
  if (stats.skippedLargeFiles > 0) {
    tips.push('💡 Tip: Add heavy files to .contextminify to save tokens.');
  }
  
  if (stats.binaryAndSvgFiles > 0) {
    tips.push('💡 Tip: Binary files and SVGs are included but not minified.');
  }
  
  if (stats.filesIgnored > stats.totalFilesFound * 0.5) {
    tips.push('💡 Tip: More than 50% of files were ignored. Review your ignore patterns.');
  }
  
  if (stats.topTokenConsumers[0] && stats.topTokenConsumers[0].tokenCount > stats.totalTokenCount * 0.3) {
    tips.push('💡 Tip: One file consumes >30% of tokens. Consider splitting large files.');
  }

  if (tips.length > 0) {
    report.push('');
    report.push('🎯 RECOMMENDATIONS');
    report.push('───────────────────────────────');
    report.push(...tips);
  }

  // Add footer
  report.push('');
  report.push('───────────────────────────────');
  report.push('Report generated by src-context');

  return report.join('\n');
}